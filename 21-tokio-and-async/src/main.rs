/// # เปรียบเทียบ Tokio Async กับ Rust Threads ในภาษา Rust
///
/// | คุณสมบัติ           | Tokio Async                          | Rust Threads                          |
/// |----------------------|--------------------------------------|---------------------------------------|
/// | การจัดการ            | ใช้ runtime ของ Tokio เพื่อจัดการ    | ใช้ OS threads โดยตรง                 |
/// | ประสิทธิภาพ          | มีประสิทธิภาพสูงในการจัดการ I/O     | เหมาะสำหรับงานที่ต้องการการประมวลผลสูง |
/// | การใช้งานทรัพยากร    | ใช้ทรัพยากรน้อยกว่าเมื่อทำงาน I/O  | ใช้ทรัพยากรมากกว่า                   |
/// | ความซับซ้อน          | ซับซ้อนกว่าในการเขียนและดีบัก       | ง่ายกว่าในการเขียนและดีบัก           |
/// | การใช้งาน            | เหมาะสำหรับงานที่ต้องการการทำงานพร้อมกันหลายงาน | เหมาะสำหรับงานที่ต้องการการประมวลผลหนัก |
/// | การสนับสนุน          | มี library และ ecosystem ที่แข็งแกร่ง | ใช้ library มาตรฐานของ Rust          |
/// | การบล็อก             | ไม่บล็อกโดยค่าเริ่มต้น             | บล็อกโดยค่าเริ่มต้น                  |
///
/// ## โมเดลการทำงานพร้อมกัน (Concurrency Model)
/// - **Tokio Async**: ใช้โมเดลการทำงานพร้อมกันแบบ asynchronous ซึ่งช่วยให้สามารถจัดการกับงาน I/O ได้อย่างมีประสิทธิภาพโดยไม่ต้องบล็อก thread หลัก
/// - **Rust Threads**: ใช้โมเดลการทำงานพร้อมกันแบบ multi-threading ซึ่งแต่ละ thread จะทำงานแยกกันและสามารถบล็อกได้
///
/// ## การใช้งานทรัพยากร (Resource Usage)
/// - **Tokio Async**: ใช้ทรัพยากรน้อยกว่าเมื่อทำงานกับงาน I/O เนื่องจากไม่ต้องสร้าง thread ใหม่สำหรับแต่ละงาน
/// - **Rust Threads**: ใช้ทรัพยากรมากกว่าเนื่องจากต้องสร้าง thread ใหม่สำหรับแต่ละงาน
///
/// ## กรณีการใช้งาน (Use Cases)
/// - **Tokio Async**: เหมาะสำหรับงานที่ต้องการการจัดการ I/O ที่มีประสิทธิภาพสูง เช่น การทำงานกับเครือข่าย, การอ่าน/เขียนไฟล์
/// - **Rust Threads**: เหมาะสำหรับงานที่ต้องการการประมวลผลหนัก เช่น การคำนวณทางคณิตศาสตร์, การประมวลผลข้อมูลขนาดใหญ่
///
/// ## การบล็อก (Blocking)
/// - **Tokio Async**: ไม่บล็อกโดยค่าเริ่มต้น เนื่องจากใช้การทำงานแบบ asynchronous
/// - **Rust Threads**: บล็อกโดยค่าเริ่มต้น เนื่องจากใช้การทำงานแบบ synchronous
///
/// ## สรุป
/// - **Tokio Async** เหมาะสำหรับงานที่ต้องการการจัดการ I/O ที่มีประสิทธิภาพสูงและการทำงานพร้อมกันหลายงาน
/// - **Rust Threads** เหมาะสำหรับงานที่ต้องการการประมวลผลหนักและการใช้งานที่ง่ายกว่า

// #[tokio::main] เป็น macro ที่ใช้ใน Rust เพื่อระบุว่า main function ของโปรแกรมนี้จะใช้ runtime ของ tokio
// tokio เป็น asynchronous runtime ที่ใช้สำหรับการเขียนโปรแกรมแบบ asynchronous ใน Rust
// macro นี้จะทำให้ main function สามารถใช้ async/await syntax ได้

async fn gather_herbs() {
    println!("Gathering herbs...");
}

async fn collect_herbs() {
    println!("Collecting herbs...");
}

async fn fight_monster() {
    println!("Fighting monster...");
}

#[tokio::main]
async fn main() {
    let task_1 = tokio::spawn(gather_herbs());
    let task_2 = tokio::spawn(collect_herbs());
    let task_3 = tokio::spawn(fight_monster());

    let _ = tokio::join!(task_1, task_2, task_3);
}
