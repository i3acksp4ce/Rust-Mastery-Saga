//! # การจัดการโครงสร้างโปรเจค Rust (Rust Project Structure Management)
//!
//! โมดูลใน Rust ช่วยจัดการและจัดระเบียบโค้ดให้เป็นส่วนๆ ได้ดังนี้:
//!
//! ## การนำเข้าและส่งออก (Import/Export)
//! - ใช้ `use` เพื่อนำเข้าโมดูลหรือฟังก์ชัน
//! - ใช้ `pub` เพื่อทำให้โมดูลหรือฟังก์ชันเป็นสาธารณะ
//! - ใช้ `mod` เพื่อประกาศโมดูล
//!
//! ## การจัดการไฟล์และโครงสร้าง
//! - `src/lib.rs` - ไฟล์หลักสำหรับไลบรารี่
//! - `src/main.rs` - จุดเริ่มต้นของโปรแกรม
//! - `mod.rs` - ไฟล์สำหรับจัดการโมดูลย่อย
//!
//! ## การควบคุมการเข้าถึง
//! - ฟังก์ชันที่ไม่มี `pub` จะเป็น private โดยค่าเริ่มต้น
//! - `pub(crate)` - เข้าถึงได้เฉพาะภายใน crate
//! - `pub(super)` - เข้าถึงได้จากโมดูลแม่
//! - `pub(self)` - เข้าถึงได้เฉพาะภายในโมดูลปัจจุบัน
//!
//! ## การใช้ Crate
//! - เพิ่ม dependency ใน Cargo.toml
//! - ใช้ `extern crate` สำหรับ Rust เวอร์ชันเก่า
//! - สามารถใช้ `use` ได้โดยตรงใน Rust เวอร์ชันใหม่
//!
//! ## แนวทางการจัดโครงสร้าง
//! 1. แยกโค้ดเป็นโมดูลตามหน้าที่
//! 2. ใช้ไฟล์แยกสำหรับโมดูลขนาดใหญ่
//! 3. จัดกลุ่มฟังก์ชันที่เกี่ยวข้องไว้ด้วยกัน
//! 4. ตั้งชื่อไฟล์และโมดูลให้สื่อความหมาย
//!
//! ## โครงสร้างโปรเจค
//! ```text
//! rust-mastery-saga/          # โฟลเดอร์โปรเจคหลัก
//! ├── Cargo.toml              # ไฟล์การตั้งค่าโปรเจคและ dependencies
//! └── src/                    # โฟลเดอร์สำหรับโค้ดต้นฉบับ
//!     ├── main.rs             # จุดเริ่มต้นของโปรแกรม
//!     ├── lib.rs              # ไฟล์หลักสำหรับไลบรารี่
//!     ├── utils/              # โฟลเดอร์สำหรับโมดูลย่อย
//!     │   ├── mod.rs          # ไฟล์สำหรับจัดการโมดูลย่อยใน utils
//!     │   ├── use_one.rs      # ไฟล์สำหรับโมดูล use_one
//!     │   └── use_two.rs      # ไฟล์สำหรับโมดูล use_two
//! ```

use modules_and_creates::utils;

fn main() {
    utils::use_one::first_fn();
    utils::use_one::second_fn();

    utils::use_two::first_fn();
    utils::use_two::second_fn();
}
