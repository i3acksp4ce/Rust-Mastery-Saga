/// ฟังก์ชัน `iter` ใช้สำหรับสร้าง iterator จากเวกเตอร์หรือคอลเลกชันอื่นๆ
/// ซึ่งจะช่วยให้เราสามารถทำการวนลูปหรือประมวลผลข้อมูลในคอลเลกชันนั้นได้
///
/// ฟังก์ชัน `map` ใช้สำหรับแปลงค่าของแต่ละองค์ประกอบใน iterator
/// โดยเราสามารถกำหนดฟังก์ชันหรือ closure ที่จะใช้แปลงค่าได้
///
/// ฟังก์ชัน `collect` ใช้สำหรับรวบรวมค่าที่ได้จาก iterator
/// และแปลงกลับมาเป็นคอลเลกชันใหม่ เช่น เวกเตอร์
///
/// ตัวอย่างเช่น การใช้ `iter`, `map`, และ `collect` ร่วมกัน
/// เพื่อแปลงค่าในเวกเตอร์และสร้างเวกเตอร์ใหม่ที่มีค่าที่ถูกแปลงแล้ว
fn main() {
    let items = vec![1, 2, 3, 4, 5];
    let double_items: Vec<i32> = items.iter().map(|x| x * 2).collect();

    println!("{:?}", double_items);
}
